# plot most frequent items
df_transactions %>%
itemFrequencyPlot(support = 0.1,
cex.names = 0.8) %>%
arrange(desc(support))
# plot most frequent items
df_transactions %>%
itemFrequencyPlot(support = 0.1,
cex.names = 0.8) %>%
sort(desc(support))
# plot most frequent items
df_transactions %>%
itemFrequencyPlot(support = 0.1,
cex.names = 0.8) %>%
sort(support)
# plot most frequent items
df_transactions %>%
itemFrequencyPlot(support = 0.1,
cex.names = 0.8) %>%
order(support)
# vizualize sample of 200 transactions
df_transactions %>%
image()
# use apriori function to find association rules
ruleset_01 <- df_transactions %>%
apriori(parameter = list(supp = 0.01, conf = 0.15))
ruleset_01 %>%
inspect() %>%
kbl() %>%
kable_paper('striped', 'condensed', font_size = 10)
# use apriori function to find association rules
ruleset_01 <- df_transactions %>%
apriori(parameter = list(supp = 0.01, conf = 0.25))
ruleset_01 %>%
inspect() %>%
kbl() %>%
kable_paper('striped', 'condensed', font_size = 10)
inspect(ruleset_01[1:10])
inspect(ruleset_01[1:10]) %>%
kbl() %>%
kable_paper('striped', 'condensed', font_size = 10)
ruleset_01 %>%
slice(n = 10) %>%
inspect(ruleset_01[1:10]) %>%
kbl() %>%
kable_paper('striped', 'condensed', font_size = 10)
summary(ruleset_01)
# use apriori function to find association rules
ruleset_02 <- df_transactions %>%
apriori(parameter = list(supp = 0.04, conf = 0.25, minlen = 2))
ruleset_02 %>%
inspect() %>%
kbl() %>%
kable_paper('striped', 'condensed', font_size = 10)
# use apriori function to find association rules
ruleset_02 <- df_transactions %>%
apriori(parameter = list(supp = 0.04, conf = 0.25))
ruleset_02 %>%
inspect() %>%
kbl() %>%
kable_paper('striped', 'condensed', font_size = 10)
ruleset_01 %>%
head() %>%
inspect()
ruleset_01 %>%
head() %>%
inspect() %>%
kbl() %>%
kable_paper('striped', 'condensed')
ruleset_01 %>%
head() %>%
inspect() %>%
kbl() %>%
kable_paper()
ruleset_01 %>%
head() %>%
inspect() %>%
kable_paper()
ruleset_01 %>%
head() %>%
inspect() %>%
kbl() %>%
kable_paper()
ruleset_01 %>%
inspect() %>%
kbl() %>%
kable_paper()
ruleset_01 %>%
inspect() %>%
head() %>%
kbl() %>%
kable_paper()
inspect(head(ruleset_01))
inspect(head(ruleset_01)) %>%
kbl() %>%
kable_paper()
ruleset_02 %>%
inspect() %>%
head() %>%
kbl() %>%
kable_paper('striped', 'condensed', font_size = 10)
ruleset_01 %>%
inspect() %>%
head() %>%
kbl() %>%
kable_paper('striped', 'condensed', font_size = 10)
ruleset_01 %>%
head() %>%
kbl() %>%
kable_paper('striped', 'condensed', font_size = 10)
# find all potentially valuable association rules
ruleset_01 <- df_transactions %>%
apriori(parameter = list(supp = 0.01, conf = 0.15))
summary(ruleset_01)
knitr::opts_chunk$set(echo = TRUE)
#load standard pkgs
library(tidyverse)
library(here)
library(janitor)
library(skimr)
library(ggplot2)
library(reader)
library(kableExtra)
#load pkgs for market basket analysis
library(arules)
library(arulesViz)
#read in transnational data using read.transactions() from arules pkg
df_transactions <- read.transactions(
here('Data', 'ElectronidexTransactions2017.csv'),
format = 'basket',
sep = ',',
rm.duplicates = TRUE)
# verify import
(df_transactions)
# return summary info about the dataset
summary(df_transactions)
# inspect 0 length transactions
inspect(df_transactions[size(df_transactions) == 0])
# inspect transactions with 22 or more items
inspect(df_transactions[size(df_transactions) > 21])
# plot most frequent items
itemFrequencyPlot(df_transactions,
topN = 20,
type = 'absolute',
cex.names = 0.8) #reduce label size (easier reading)
# find all potentially valuable association rules
ruleset_01 <- df_transactions %>%
apriori(parameter = list(supp = 0.01, conf = 0.15))
summary(ruleset_01)
# use apriori function to find association rules
ruleset_02 <- df_transactions %>%
apriori(parameter = list(supp = 0.04, conf = 0.25))
ruleset_02 %>%
inspect() %>%
head() %>%
kbl() %>%
kable_paper('striped', 'condensed', font_size = 10)
rules_sorted <- sort(ruleset_01, by = 'confidence')
ruleset_01 %>%
sort(by = 'confidence') %>%
head() %>%
inspect()
ruleset_01 %>%
sort(by = 'confidence') %>%
head() %>%
inspect() %>%
kbl()
ruleset_01 %>%
sort(by = 'confidence') %>%
head() %>%
inspect() %>%
kable()
rulesubset_01 <- ruleset_01 %>%
sort(by = 'confidence') %>%
head() %>%
inspect()
rulesubset_01 %>%
kbl()
ruleset_01 %>%
sort(by = 'confidence') %>%
head() %>%
inspect()
# use apriori function to find association rules
ruleset_02 <- df_transactions %>%
apriori(parameter = list(supp = 0.03, conf = 0.25))
ruleset_02 %>%
inspect() %>%
head() %>%
kbl() %>%
kable_paper('striped', 'condensed', font_size = 10)
# use apriori function to find association rules
ruleset_02 <- df_transactions %>%
apriori(parameter = list(supp = 0.04, conf = 0.25))
ruleset_02 %>%
inspect() %>%
head() %>%
kbl() %>%
kable_paper('striped', 'condensed', font_size = 10)
# use apriori function to find association rules
ruleset_02 <- df_transactions %>%
apriori(parameter = list(supp = 0.04, conf = 0.15))
ruleset_02 %>%
inspect() %>%
head() %>%
kbl() %>%
kable_paper('striped', 'condensed', font_size = 10)
# use apriori function to find association rules
ruleset_02 <- df_transactions %>%
apriori(parameter = list(supp = 0.04, conf = 0.15))
ruleset_02 %>%
inspect() %>%
kbl() %>%
kable_paper('striped', 'condensed', font_size = 10)
# use apriori function to find association rules
ruleset_02 <- df_transactions %>%
apriori(parameter = list(supp = 0.035, conf = 0.15))
ruleset_02 %>%
inspect() %>%
kbl() %>%
kable_paper('striped', 'condensed', font_size = 10)
# use apriori function to find association rules
ruleset_02 <- df_transactions %>%
apriori(parameter = list(supp = 0.04, conf = 0.15))
ruleset_02 %>%
inspect() %>%
kbl() %>%
kable_paper('striped', 'condensed', font_size = 10)
ruleset_01 %>%
sort(by = 'confidence') %>%
head() %>%
inspect() %>%
kable(format = 'markdown')
ruleset_01 %>%
sort(by = 'confidence') %>%
head() %>%
inspect()
3/5
1/5
knitr::opts_chunk$set(echo = TRUE)
# load standard pkgs
library(tidyverse)
library(here)
# load pkgs for market basket analysis
library(arules)
library(arulesViz)
transactions <- read.transactions(
here('Data', 'ElectronidexTransactions2017.csv'),
format = 'basket',
sep = ',',
rm.duplicates = TRUE)
# verify import
transactions
View(transactions)
transactions_df <- data.frame(transactions)
transactions_df <- read.table(text=do.call(paste,aggregate(.~ID,transactions,paste,collapse = ' ')),fill=T,h=F)
transactions_df <- reshape(transform(transactions,time=ave(ID,ID,FUN=seq_along)),idvar = 'ID',dir='wide')
transactions_df <- t(as(transactions, "ngcMatrix"))
transactions_df <- (as(transactions, "ngcMatrix"))
as.matrix(transactions@itemInfo$labels)
transactions_matrix <- as.matrix(transactions@itemInfo$labels)
transaction_df <- as.data.frame(transactions_matrix)
View(transaction_df)
transactions_matrix <- as(transactions, 'matrix')
transaction_df <- as.data.frame(transactions_matrix)
View(transaction_df)
write.csv(transaction_df, here( "Data", "Electronidex_new.csv"))
View(transaction_df)
View(transaction_df)
transactions <- read.transactions(
here('Data', 'ElectronidexTransactions2017.csv'),
format = 'basket',
sep = ',',
rm.duplicates = TRUE)
transactions_matrix <- as(transactions, 'ngmatrix')
transactions_matrix <- as(transactions, 'matrix')
transaction_df <- as.data.frame(transactions_matrix)
2/5
View(transaction_df)
View(transaction_df)
transactions_num <- as.numeric(transaction_df)
transactions_num <- 1 * transaction_df
View(transactions_num)
transactions <- read.transactions(
here('Data', 'ElectronidexTransactions2017.csv'),
format = 'basket',
sep = ',',
rm.duplicates = TRUE)
# verify import
transactions
summary(transactions)
# plot most frequent items
itemFrequencyPlot(df_transactions,
topN = 10,
type = 'absolute',
cex.names = 0.8) #reduce label size (easier reading)
# plot most frequent items
itemFrequencyPlot(transactions,
topN = 10,
type = 'absolute',
cex.names = 0.8) #reduce label size (easier reading)
inspect(transactions[size(transactions) >= 22])
# to change long outputs scrolling, add mat.height='1001 to code chunk
options(width = 60)
local({
hook_output <- knitr::knit_hooks$get('output')
knitr::knit_hooks$set(output = function(x, options) {
if (!is.null(options$max.height)) options$attr.output <- c(
options$attr.output,
sprintf('style="max-height: %s;"', options$max.height)
)
hook_output(x, options)
})
})
# find all potentially valuable association rules
ruleset_01 <- transactions %>%
apriori()
ruleset_01 <- transactions %>%
apriori(parameter = list(supp = 0.01, conf = 0.15))
summary(ruleset_01)
ruleset_01 %>%
head(n =15)
ruleset_01 %>%
head(n =15) %>%
inspect()
library(kableExtra)
ruleset_01 %>%
head(n =15) %>%
inspect() %>%
kable() %>%
kable_paper()
(ruleset_01 %>%
head(n =15) %>%
inspect())
ruleset_01 <- transactions %>%
apriori(parameter = list(supp = 0.01, conf = 0.25))
summary(ruleset_01)
ruleset_01 %>%
head(n =15) %>%
inspect()
ruleset_01 %>%
head(n =15) %>%
inspect() %>%
kbl() %>%
kable_paper('striped', 'condensed')
ruleset_01 %>%
inspect() %>%
head(n =15)
ruleset_01 %>%
inspect(head(n =15)) %>%
ruleset_01 %>%
inspect(head(n =15))
inspect(ruleset_01[head(ruleset_01, n =15)])
ruleset_01 %>%
head(n=15) %>%
inspect()
ruleset_01 %>%
head(n=10) %>%
inspect()
transactions <- read.transactions(
here('Data', 'ElectronidexTransactions2017.csv'),
format = 'basket',
sep = ',',
rm.duplicates = TRUE)
# verify import
transactions
ruleset_01 <- transactions %>%
apriori(parameter = list(supp = 0.01, conf = 0.15))
summary(ruleset_01)
ruleset_01 %>%
head(n=10) %>%
inspect()
1530+1715+1809+1909+2519
9482/9835
ruleset_01 <- %>%
ruleset_01 %>%
sort(by = 'confidence') %>%
head(n = 10) %>%
inspect()
ruleset_01 %>%
tail(n=10) %>%
inspect()
ruleset_01 <- transactions %>%
apriori(parameter = list(supp = 0.01, conf = 0.15, minlen = 2))
inspect(transactions[size(transactions) >= 25])
ruleset_01 <- transactions %>%
apriori(parameter = list(supp = 0.04, conf = 0.25))
ruleset_01 <- transactions %>%
apriori(parameter = list(supp = 0.03, conf = 0.25))
summary(ruleset_01)
ruleset_01 <- transactions %>%
apriori(parameter = list(supp = 0.02, conf = 0.25))
summary(ruleset_01)
ruleset_01 %>%
inspect() %>%
kbl() %>%
kable_paper('striped', 'condensed', font = 10)
ruleset_01 %>%
head(n = 10) %>%
inspect() %>%
kbl() %>%
kable_paper('striped', 'condensed', font = 10)
ruleset_01 %>%
head(n = 10) %>%
inspect() %>%
kbl() %>%
kable_paper('striped', 'condensed')
ruleset_01 %>%
sort(by = 'confidence') %>%
head(n = 10) %>%
inspect()
ruleset_01 %>%
sort(by = 'confidence') %>%
head(n = 10) %>%
inspect() %>%
kable_paper('striped', 'condensed')
ruleset_01 %>%
sort(by = 'confidence') %>%
head(n = 10) %>%
inspect() %>%
kbl() %>%
kable_paper('striped', 'condensed')
ruleset_01 %>%
head(n = 10) %>%
inspect() %>%
sort(by = 'confidence') %>%
kbl() %>%
kable_paper('striped', 'condensed')
ruleset_01 %>%
head(n = 10) %>%
inspect() %>%
kbl() %>%
kable_paper('striped', 'condensed')
ruleset_01 %>%
head(n = 10) %>%
sort(by = 'confidence') %>%
inspect() %>%
kbl() %>%
kable_paper('striped', 'condensed')
ruleset_01 %>%
head(n = 20) %>%
inspect() %>%
kbl() %>%
kable_paper('striped', 'condensed')
ruleset_01 %>%
head(n = 20) %>%
inspect() %>%
kbl() %>%
kable_paper('striped', 'condensed')
ruleset_01 %>%
head(n = 10) %>%
inspect() %>%
kbl() %>%
kable_paper('striped', 'condensed')
ruleset_01 %>%
head(n = 15) %>%
inspect() %>%
kbl() %>%
kable_paper('striped', 'condensed')
ruleset_01 %>%
head(n = 15) %>%
inspect() %>%
kbl() %>%
kable_paper('striped', 'condensed', font = 11)
ruleset_01 %>%
head(n = 15) %>%
inspect() %>%
kbl() %>%
kable_paper('striped', 'condensed', font = 10)
ruleset_01 %>%
head(n = 10) %>%
inspect() %>%
kbl() %>%
kable_paper('striped', 'condensed')
is.redundant(ruleset_01)
plot(ruleset_01,
method = "graph",
control = list(type = "items"))
View(ruleset_01)
ruleset_02 <- transactions %>%
apriori(parameter = list(supp = 0.02, conf = 0.5))
plot(ruleset_02,
method = "graph",
control = list(type = "items"))
ruleset_02 <- transactions %>%
apriori(parameter = list(supp = 0.02, conf = 0.4))
plot(ruleset_02,
method = "graph",
control = list(type = "items"))
ruleset_02 <- transactions %>%
apriori(parameter = list(supp = 0.02, conf = 0.4))
plot(ruleset_02,
method = "graph",
control = list(type = "items"),
scale = 0.8)
plot(ruleset_01,
method = "graph",
engine = "htmlwidget"
)
plot(ruleset_01,
method = "graph",
focus = "lift",
engine = "htmlwidget"
)
plot(ruleset_01,
method = "graph",
engine = "htmlwidget"
)
plot(ruleset_01,
method = "graph",
focus = "lift",
engine = "htmlwidget"
)
